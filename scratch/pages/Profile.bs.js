// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Hub from "../aws/Hub.bs.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Container from "../components/Container.bs.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as AwsAmplify from "aws-amplify";

var currentUserPoolUser = AwsAmplify.Auth.currentUserPoolUser().then((function (res) {
        return Promise.resolve(res);
      }));

var Auth = {
  currentUserPoolUser: currentUserPoolUser
};

function Profile(Props) {
  var match = React.useState((function () {
          return ;
        }));
  var setUser = match[1];
  var user = match[0];
  var handleUserInfo = function (data) {
    var userInfo_000 = /* username */data.username;
    var userInfo_001 = /* attributes */data.attributes;
    var userInfo = /* record */[
      userInfo_000,
      userInfo_001
    ];
    Curry._1(setUser, (function (param) {
            return userInfo;
          }));
    console.log(data);
    console.log("userInfo: ", userInfo);
    return Promise.resolve(/* Ok */Block.__(0, [data]));
  };
  var checkUser = function (param) {
    var match = AwsAmplify.Auth.currentAuthenticatedUser();
    var user;
    if (match.tag) {
      var match$1 = match[0];
      var stack = match$1[1];
      var message = match$1[0];
      console.log("message: ", message, "stack: ", stack);
      var err = Belt_Option.mapWithDefault(stack, "", (function (s) {
              return s;
            }));
      console.log("message: ", message, "error: ", err);
      user = /* tuple */[
        message,
        err
      ];
    } else {
      user = (function (data) {
          handleUserInfo(data);
          return /* () */0;
        });
    }
    console.log("userInfo: ", user);
    return /* () */0;
  };
  var listener = function (payload) {
    console.log("listener_payload", payload);
    var match = payload[/* event */0];
    switch (match) {
      case "configured" :
          console.log("the Auth module is configured");
          return /* () */0;
      case "signIn" :
          console.log("user signed in");
          return /* () */0;
      case "signIn_failure" :
          console.log("user sign in failed");
          return /* () */0;
      case "signOut" :
          console.log("user signed out");
          return /* () */0;
      case "signUp" :
          console.log("user signed up");
          return /* () */0;
      default:
        console.log("unknown error");
        return /* () */0;
    }
  };
  React.useEffect((function () {
          checkUser(/* () */0);
          Hub.listen("auth", listener);
          return ;
        }));
  if (user !== undefined) {
    var user$1 = user;
    return React.createElement(Container.make, {
                children: null
              }, React.createElement("h1", undefined, "Profile"), React.createElement("h2", undefined, "Username: " + user$1[/* username */0]), React.createElement("h3", undefined, "Email: " + user$1[/* attributes */1][/* email */0]), React.createElement("button", {
                    onClick: (function (param) {
                        AwsAmplify.Auth.signOut().then((function (data) {
                                  console.log("signed Out: ", data);
                                  return Promise.resolve(/* () */0);
                                })).catch((function (error) {
                                console.log("error", error);
                                return Promise.resolve(/* () */0);
                              }));
                        return /* () */0;
                      })
                  }, "Sign Out"));
  } else {
    return React.createElement(Container.make, {
                children: null
              }, React.createElement("h1", undefined, "Profile"), React.createElement("h2", undefined, "No Profile Available: "));
  }
}

var make = Profile;

export {
  Auth ,
  make ,
  
}
/* currentUserPoolUser Not a pure module */
