// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";

function option_map(fn, opt_value) {
  if (opt_value !== undefined) {
    return Caml_option.some(Curry._1(fn, Caml_option.valFromOption(opt_value)));
  }
  
}

function optBoolToOptJsBoolean(param) {
  if (param !== undefined) {
    return Caml_option.some(Caml_option.valFromOption(param));
  }
  
}

function $less$less(f, g, x) {
  return Curry._1(f, Curry._1(g, x));
}

function dictEntries(dict) {
  var keys = Object.keys(dict);
  var l = keys.length;
  var values = Caml_array.caml_make_vect(l, 0);
  for(var i = 0 ,i_finish = l - 1 | 0; i <= i_finish; ++i){
    var key = keys[i];
    Caml_array.caml_array_set(values, i, /* tuple */[
          key,
          dict[key]
        ]);
  }
  return values;
}

function dictValues(dict) {
  var keys = Object.keys(dict);
  var l = keys.length;
  var values = Caml_array.caml_make_vect(l, 0);
  for(var i = 0 ,i_finish = l - 1 | 0; i <= i_finish; ++i){
    Caml_array.caml_array_set(values, i, dict[keys[i]]);
  }
  return values;
}

function dictFromList(entries) {
  var dict = { };
  var _param = entries;
  while(true) {
    var param = _param;
    if (param) {
      var match = param[0];
      dict[match[0]] = match[1];
      _param = param[1];
      continue ;
    } else {
      return dict;
    }
  };
}

function dictFromArray(entries) {
  var dict = { };
  var l = entries.length;
  for(var i = 0 ,i_finish = l - 1 | 0; i <= i_finish; ++i){
    var match = entries[i];
    dict[match[0]] = match[1];
  }
  return dict;
}

export {
  option_map ,
  optBoolToOptJsBoolean ,
  $less$less ,
  dictEntries ,
  dictValues ,
  dictFromList ,
  dictFromArray ,
  
}
/* No side effect */
