// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Css from "bs-css/src/Css.js";
import * as Auth from "../aws/Auth.bs.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as SignIn from "../forms/SignIn.bs.js";
import * as SignUp from "../forms/SignUp.bs.js";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as FormStyle from "./FormStyle.bs.js";
import * as ConfirmSignUp from "../forms/ConfirmSignUp.bs.js";
import * as ForgotPassword from "../forms/ForgotPassword.bs.js";
import * as ReasonReactRouter from "reason-react/src/ReasonReactRouter.js";
import * as ForgotPasswordSubmit from "../forms/ForgotPasswordSubmit.bs.js";

var initialFormData = /* record */[
  /* username */"",
  /* email */"",
  /* password */"",
  /* confirmationCode */""
];

function formReducer(state, action) {
  if (typeof action === "number") {
    return initialFormData;
  } else {
    switch (action.tag | 0) {
      case /* SetUsername */0 :
          return /* record */[
                  /* username */action[0],
                  /* email */state[/* email */1],
                  /* password */state[/* password */2],
                  /* confirmationCode */state[/* confirmationCode */3]
                ];
      case /* SetEmail */1 :
          return /* record */[
                  /* username */state[/* username */0],
                  /* email */action[0],
                  /* password */state[/* password */2],
                  /* confirmationCode */state[/* confirmationCode */3]
                ];
      case /* SetPassword */2 :
          return /* record */[
                  /* username */state[/* username */0],
                  /* email */state[/* email */1],
                  /* password */action[0],
                  /* confirmationCode */state[/* confirmationCode */3]
                ];
      case /* SetConfirmationCode */3 :
          return /* record */[
                  /* username */state[/* username */0],
                  /* email */state[/* email */1],
                  /* password */state[/* password */2],
                  /* confirmationCode */action[0]
                ];
      
    }
  }
}

function Form(Props) {
  var formType = Props.formType;
  var setUser = Props.setUser;
  var match = React.useState((function () {
          return formType;
        }));
  var updateFormType = match[1];
  var formType$1 = match[0];
  var match$1 = React.useReducer(formReducer, initialFormData);
  var dispatchFormData = match$1[1];
  var formData = match$1[0];
  var handleChange = function (evt) {
    evt.persist();
    evt.target.name;
    evt.target.value;
    var match = evt.target.name;
    switch (match) {
      case "confirmationCode" :
          return Curry._1(dispatchFormData, /* SetConfirmationCode */Block.__(3, [evt.target.value]));
      case "email" :
          return Curry._1(dispatchFormData, /* SetEmail */Block.__(1, [evt.target.value]));
      case "password" :
          return Curry._1(dispatchFormData, /* SetPassword */Block.__(2, [evt.target.value]));
      case "username" :
          return Curry._1(dispatchFormData, /* SetUsername */Block.__(0, [evt.target.value]));
      default:
        return /* () */0;
    }
  };
  var renderForm = function (param) {
    switch (formType$1) {
      case /* SignIn */0 :
          return React.createElement(SignIn.make, {
                      formType: formType$1,
                      onClick: (function (param) {
                          Auth.signIn(formData[/* username */0], formData[/* password */2]).then((function (data) {
                                    var userInfo_000 = /* username */data.username;
                                    var userInfo_001 = /* attributes */data.attributes;
                                    var userInfo = /* record */[
                                      userInfo_000,
                                      userInfo_001
                                    ];
                                    Curry._1(setUser, (function (param) {
                                            return userInfo;
                                          }));
                                    console.log(userInfo);
                                    ReasonReactRouter.push("/profile");
                                    return Promise.resolve(/* Ok */Block.__(0, [userInfo]));
                                  })).catch((function (err) {
                                  var errMsg = "error signing up.." + String(err);
                                  console.log(errMsg);
                                  return Promise.resolve(/* Error */Block.__(1, [errMsg]));
                                }));
                          return /* () */0;
                        }),
                      onChange: handleChange
                    });
      case /* SignUp */1 :
          return React.createElement(SignUp.make, {
                      formType: formType$1,
                      onClick: (function (param) {
                          var attributes = Js_dict.fromList(/* :: */[
                                /* tuple */[
                                  "email",
                                  formData[/* email */1]
                                ],
                                /* [] */0
                              ]);
                          Auth.signUp(formData[/* username */0], formData[/* password */2], attributes).then((function (data) {
                                    console.log("sign up success!");
                                    Curry._1(updateFormType, (function (param) {
                                            return /* ConfirmSignUp */2;
                                          }));
                                    return Promise.resolve(/* Ok */Block.__(0, [data]));
                                  })).catch((function (err) {
                                  var errMsg = "error signing up.." + String(err);
                                  console.log(errMsg);
                                  return Promise.resolve(/* Error */Block.__(1, [errMsg]));
                                }));
                          return /* () */0;
                        }),
                      onChange: handleChange
                    });
      case /* ConfirmSignUp */2 :
          return React.createElement(ConfirmSignUp.make, {
                      formType: formType$1,
                      onClick: (function (param) {
                          Auth.confirmSignUp(formData[/* username */0], formData[/* confirmationCode */3]).then((function (data) {
                                    console.log("sign up confirmation success!");
                                    Curry._1(updateFormType, (function (param) {
                                            return /* SignIn */0;
                                          }));
                                    return Promise.resolve(/* Ok */Block.__(0, [data]));
                                  })).catch((function (err) {
                                  var errMsg = "error signing up.." + String(err);
                                  console.log(errMsg);
                                  return Promise.resolve(/* Error */Block.__(1, [errMsg]));
                                }));
                          return /* () */0;
                        }),
                      onChange: handleChange
                    });
      case /* ForgotPassword */3 :
          return React.createElement(ForgotPassword.make, {
                      formType: formType$1,
                      onClick: (function (param) {
                          Auth.forgotPassword(formData[/* username */0]).then((function (data) {
                                    console.log("forgotPasswordSubmit success!");
                                    Curry._1(updateFormType, (function (param) {
                                            return /* ForgotPasswordSubmit */4;
                                          }));
                                    return Promise.resolve(/* Ok */Block.__(0, [data]));
                                  })).catch((function (err) {
                                  var errMsg = "forgotPasswordSubmit error.." + String(err);
                                  console.log(errMsg);
                                  return Promise.resolve(/* Error */Block.__(1, [errMsg]));
                                }));
                          return /* () */0;
                        }),
                      onChange: handleChange
                    });
      case /* ForgotPasswordSubmit */4 :
          return React.createElement(ForgotPasswordSubmit.make, {
                      formType: formType$1,
                      onClick: (function (param) {
                          Auth.forgotPasswordSubmit(formData[/* username */0], formData[/* confirmationCode */3], formData[/* password */2]).then((function (data) {
                                    console.log("forgotPasswordSubmit success!");
                                    Curry._1(updateFormType, (function (param) {
                                            return /* SignIn */0;
                                          }));
                                    return Promise.resolve(/* Ok */Block.__(0, [data]));
                                  })).catch((function (err) {
                                  var errMsg = "forgotPasswordSubmit error.." + String(err);
                                  console.log(errMsg);
                                  return Promise.resolve(/* Error */Block.__(1, [errMsg]));
                                }));
                          return /* () */0;
                        }),
                      onChange: handleChange
                    });
      
    }
  };
  var match$2 = formType$1 === /* SignUp */1;
  var match$3 = formType$1 === /* SignIn */0;
  return React.createElement("div", undefined, renderForm(/* () */0), match$2 ? React.createElement("p", {
                    className: FormStyle.Styles.toggleForm
                  }, "Already have an account? ", React.createElement("span", {
                        className: FormStyle.Styles.anchor,
                        onClick: (function (param) {
                            return Curry._1(updateFormType, (function (param) {
                                          return /* SignIn */0;
                                        }));
                          })
                      }, "Sign In")) : null, match$3 ? React.createElement(React.Fragment, undefined, React.createElement("p", {
                        className: FormStyle.Styles.toggleForm
                      }, "Need an account? ", React.createElement("span", {
                            className: FormStyle.Styles.anchor,
                            onClick: (function (param) {
                                return Curry._1(updateFormType, (function (param) {
                                              return /* SignUp */1;
                                            }));
                              })
                          }, "Sign Up")), React.createElement("p", {
                        className: Css.merge(/* :: */[
                              FormStyle.Styles.toggleForm,
                              /* :: */[
                                FormStyle.Styles.resetPassword,
                                /* [] */0
                              ]
                            ])
                      }, "Forget your password? ", React.createElement("span", {
                            className: FormStyle.Styles.anchor,
                            onClick: (function (param) {
                                return Curry._1(updateFormType, (function (param) {
                                              return /* ForgotPassword */3;
                                            }));
                              })
                          }, "Reset Password"))) : null);
}

var make = Form;

export {
  initialFormData ,
  formReducer ,
  make ,
  
}
/* Css Not a pure module */
